import React, { useState } from 'react';
import Calendar from 'react-calendar';
// –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç CSS –¥–ª—è react-calendar, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å PostCSS
// import 'react-calendar/dist/Calendar.css';
import { format } from 'date-fns';
import { usePainRecords } from '../context/PainRecordContext';
import { PainRecord } from '../types';
import './PainCalendar.css'; // –û—Å—Ç–∞–≤–∏–º —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è

type CalendarValue = Date | null | [Date | null, Date | null];

const PainCalendar = () => {
  const [date, setDate] = useState<Date>(new Date());
  const { getRecordsForDate, deleteRecord } = usePainRecords();
  const [deleteConfirmId, setDeleteConfirmId] = useState<string | null>(null);
  const [sortByTime, setSortByTime] = useState<boolean>(true);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–µ–π –æ –±–æ–ª–∏
  const getTileClassName = ({ date, view }: { date: Date; view: string }) => {
    if (view !== 'month') return '';

    const dateRecords = getRecordsForDate(date);
    if (!dateRecords.length) return '';

    const classNames = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –±–æ–ª–∏ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
    if (dateRecords.some(record => record.type === 'headache')) {
      classNames.push('headache-pain');
    }
    
    if (dateRecords.some(record => record.type === 'stomach')) {
      classNames.push('stomach-pain');
    }
    
    return classNames.join(' ');
  };

  const handleDateChange = (value: CalendarValue) => {
    if (value instanceof Date) {
      setDate(value);
    } else if (Array.isArray(value) && value[0] instanceof Date) {
      setDate(value[0]);
    }
  };

  const getDayRecords = () => {
    const records = getRecordsForDate(date);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ–ø—Ü–∏—è
    if (sortByTime) {
      return [...records].sort((a, b) => {
        return a.time.localeCompare(b.time);
      });
    }
    
    return records;
  };

  const handleDeleteClick = (id: string) => {
    setDeleteConfirmId(id);
  };

  const confirmDelete = (id: string) => {
    deleteRecord(id);
    setDeleteConfirmId(null);
  };

  const cancelDelete = () => {
    setDeleteConfirmId(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä, –Ω–æ—á—å)
  const getTimeOfDay = (time: string): string => {
    const hour = parseInt(time.split(':')[0], 10);
    
    if (hour >= 5 && hour < 12) return '–£—Ç—Ä–æ';
    if (hour >= 12 && hour < 18) return '–î–µ–Ω—å';
    if (hour >= 18 && hour < 23) return '–í–µ—á–µ—Ä';
    return '–ù–æ—á—å';
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  const getTimeIcon = (time: string): string => {
    const timeOfDay = getTimeOfDay(time);
    
    switch (timeOfDay) {
      case '–£—Ç—Ä–æ': return 'üåÖ';
      case '–î–µ–Ω—å': return '‚òÄÔ∏è';
      case '–í–µ—á–µ—Ä': return 'üåÜ';
      case '–ù–æ—á—å': return 'üåô';
      default: return '‚è±Ô∏è';
    }
  };
  
  return (
    <div className="mt-5 max-w-3xl mx-auto">
      <h2 className="text-xl font-semibold text-gray-800 mb-4">–ö–∞–ª–µ–Ω–¥–∞—Ä—å –±–æ–ª–∏</h2>
      
      <div className="mx-auto mb-6 calendar-container">
        <Calendar 
          onChange={handleDateChange}
          value={date}
          tileClassName={getTileClassName}
          className="border-0 rounded-lg shadow-md"
        />
      </div>
      
      <div className="bg-white p-4 rounded-lg shadow-md">
        <div className="flex justify-between items-center mb-3">
          <h3 className="text-lg font-medium text-gray-800">
            –ó–∞–ø–∏—Å–∏ –Ω–∞ {format(date, 'dd.MM.yyyy')}
          </h3>
          
          <div className="flex items-center">
            <label className="inline-flex items-center cursor-pointer">
              <input 
                type="checkbox" 
                checked={sortByTime}
                onChange={() => setSortByTime(!sortByTime)}
                className="form-checkbox h-3.5 w-3.5 text-green-600 rounded border-gray-300 focus:ring-green-500"
              />
              <span className="ml-1.5 text-sm text-gray-700">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏</span>
            </label>
          </div>
        </div>
        
        <div className="flex flex-wrap gap-3 mb-4">
          <div className="flex items-center">
            <div className="w-4 h-4 rounded-full bg-pink-300 mr-1.5"></div>
            <span className="text-sm">–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å</span>
          </div>
          <div className="flex items-center">
            <div className="w-4 h-4 rounded-full bg-blue-300 mr-1.5"></div>
            <span className="text-sm">–ë–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ</span>
          </div>
        </div>
        
        {getDayRecords().length === 0 ? (
          <p className="text-gray-500 italic">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</p>
        ) : (
          <ul className="space-y-3">
            {getDayRecords().map((record: PainRecord) => (
              <li key={record.id} className="bg-gray-50 rounded-md p-3 flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center mb-1">
                    <span className={`font-medium ${record.type === 'headache' ? 'text-pink-700' : 'text-blue-700'} mr-2`}>
                      {record.type === 'headache' ? '–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å' : '–ë–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ'}
                    </span>
                    
                    <div className="bg-gray-200 rounded-full px-2 py-0.5 text-xs text-gray-700 flex items-center">
                      <span className="mr-1">{getTimeIcon(record.time)}</span>
                      <span>{record.time}</span>
                    </div>
                  </div>
                  
                  <div className="text-sm text-gray-700 space-y-1">
                    <div>–ü—Ä–∏—á–∏–Ω–∞: <span className="font-medium">{getPainCauseLabel(record.cause)}</span></div>
                    <div>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: <span className="font-medium">{record.intensity}/10</span></div>
                    {record.notes && (
                      <div className="text-gray-600 italic">–ó–∞–º–µ—Ç–∫–∏: {record.notes}</div>
                    )}
                  </div>
                </div>
                
                {deleteConfirmId === record.id ? (
                  <div className="flex flex-col items-end ml-2">
                    <div className="text-xs font-medium text-red-600 mb-1">–£–¥–∞–ª–∏—Ç—å?</div>
                    <div className="flex space-x-1">
                      <button 
                        className="bg-red-500 text-white text-xs px-2 py-1 rounded hover:bg-red-600"
                        onClick={() => confirmDelete(record.id)}
                      >
                        –î–∞
                      </button>
                      <button 
                        className="bg-gray-300 text-gray-700 text-xs px-2 py-1 rounded hover:bg-gray-400"
                        onClick={cancelDelete}
                      >
                        –ù–µ—Ç
                      </button>
                    </div>
                  </div>
                ) : (
                  <button 
                    className="text-gray-400 hover:text-red-500 text-xl font-medium w-8 h-8 flex items-center justify-center"
                    onClick={() => handleDeleteClick(record.id)}
                    title="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"
                  >
                    √ó
                  </button>
                )}
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –±–æ–ª–∏
function getPainCauseLabel(cause: string): string {
  switch (cause) {
    case 'menstruation':
      return '–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è';
    case 'stress':
      return '–°—Ç—Ä–µ—Å—Å';
    case 'solarFlare':
      return '–°–æ–ª–Ω–µ—á–Ω–∞—è –≤—Å–ø—ã—à–∫–∞';
    case 'unknown':
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

export default PainCalendar; 